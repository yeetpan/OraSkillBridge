-- 1. Interests
    CREATE TABLE Interests (
        interest_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        interest_name VARCHAR2(100) UNIQUE NOT NULL
    );

    -- 2. Student
    CREATE TABLE Student (
        student_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR2(100) NOT NULL,
        email VARCHAR2(100) UNIQUE NOT NULL,
        college VARCHAR2(100)
    );

    -- 3. Student_Interests
    CREATE TABLE Student_Interests (
        student_id NUMBER,
        interest_id NUMBER,
        PRIMARY KEY (student_id, interest_id),
        FOREIGN KEY (student_id) REFERENCES Student(student_id) ON DELETE CASCADE,
        FOREIGN KEY (interest_id) REFERENCES Interests(interest_id) ON DELETE CASCADE
    );

    -- 4. Mentor
    CREATE TABLE Mentor (
        mentor_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR2(100) NOT NULL,
        email VARCHAR2(100) UNIQUE NOT NULL,
        expertise_id NUMBER NOT NULL,
        FOREIGN KEY (expertise_id) REFERENCES Interests(interest_id) ON DELETE CASCADE
    );

    -- 5. Matchmaking
    CREATE TABLE Matchmaking (
        matchmaking_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        student_id NUMBER NOT NULL,
        mentor_id NUMBER NOT NULL,
        interest_id NUMBER NOT NULL,
        mentor_name VARCHAR2(100),
        interest_name VARCHAR2(100),
        FOREIGN KEY (student_id) REFERENCES Student(student_id) ON DELETE CASCADE,
        FOREIGN KEY (mentor_id) REFERENCES Mentor(mentor_id) ON DELETE CASCADE,
        FOREIGN KEY (interest_id) REFERENCES Interests(interest_id) ON DELETE CASCADE
    );

    -- 6. Internship
    CREATE TABLE Internship (
        internship_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        org_name CLOB NOT NULL,
        title VARCHAR2(100) NOT NULL,
        capacity NUMBER NOT NULL,
        description CLOB,
        deadline DATE
    );

    -- 7. Application
    CREATE TABLE Application (
        application_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        student_id NUMBER NOT NULL,
        internship_id NUMBER NOT NULL,
        status VARCHAR2(20) CHECK (status IN ('Applied', 'Accepted', 'Rejected')) NOT NULL,
        applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (student_id) REFERENCES Student(student_id) ON DELETE CASCADE,
        FOREIGN KEY (internship_id) REFERENCES Internship(internship_id) ON DELETE CASCADE
    );

    -- 8. Session_Slot
    CREATE TABLE Session_Slot (
        slot_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        mentor_id NUMBER NOT NULL,
        session_date DATE NOT NULL,
        time TIMESTAMP NOT NULL,
        duration NUMBER NOT NULL,
        status VARCHAR2(20) CHECK (status IN ('Available', 'Booked', 'Completed', 'Cancelled')) NOT NULL,
        FOREIGN KEY (mentor_id) REFERENCES Mentor(mentor_id) ON DELETE CASCADE
    );

    -- 9. Stu_Session
    CREATE TABLE Stu_Session (
        booking_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        slot_id NUMBER NOT NULL,
        student_id NUMBER NOT NULL,
        mentor_id NUMBER NOT NULL,
        booking_status VARCHAR2(20) CHECK (booking_status IN ('Scheduled', 'Completed', 'Cancelled')) NOT NULL,
        FOREIGN KEY (slot_id) REFERENCES Session_Slot(slot_id) ON DELETE CASCADE,
        FOREIGN KEY (student_id) REFERENCES Student(student_id) ON DELETE CASCADE,
        FOREIGN KEY (mentor_id) REFERENCES Mentor(mentor_id) ON DELETE CASCADE
    );

    -- 10. Feedback
    CREATE TABLE Feedback (
        feedback_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        booking_id NUMBER NOT NULL,
        student_id NUMBER,
        rating NUMBER CHECK (rating BETWEEN 1 AND 5),
        comments CLOB,
        FOREIGN KEY (booking_id) REFERENCES Stu_Session(booking_id) ON DELETE CASCADE,
        FOREIGN KEY (student_id) REFERENCES Student(student_id) ON DELETE CASCADE
    );

-- Sample Data Inserts
-- Interests
CREATE SEQUENCE matchmaking_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE session_slot_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE stu_session_seq START WITH 1 INCREMENT BY 1;

-- === CREATE TABLES ===
CREATE TABLE Interests (
    interest_id NUMBER PRIMARY KEY,
    interest_name VARCHAR2(100)
);

CREATE TABLE Student (
    student_id NUMBER PRIMARY KEY,
    name VARCHAR2(100),
    email VARCHAR2(100),
    college VARCHAR2(100)
);

CREATE TABLE Student_Interests (
    student_id NUMBER REFERENCES Student(student_id),
    interest_id NUMBER REFERENCES Interests(interest_id),
    PRIMARY KEY(student_id, interest_id)
);

CREATE TABLE Mentor (
    mentor_id NUMBER PRIMARY KEY,
    name VARCHAR2(100),
    email VARCHAR2(100),
    expertise_id NUMBER REFERENCES Interests(interest_id)
);

CREATE TABLE Internship (
    internship_id NUMBER PRIMARY KEY,
    org_name VARCHAR2(100),
    title VARCHAR2(100),
    capacity NUMBER,
    description CLOB,
    deadline DATE
);

CREATE TABLE Application (
    application_id NUMBER PRIMARY KEY,
    student_id NUMBER REFERENCES Student(student_id),
    internship_id NUMBER REFERENCES Internship(internship_id),
    status VARCHAR2(50)
);

CREATE TABLE Session_Slot (
    slot_id NUMBER PRIMARY KEY,
    mentor_id NUMBER REFERENCES Mentor(mentor_id),
    session_date DATE,
    time TIMESTAMP,
    duration NUMBER,
    status VARCHAR2(20)
);

CREATE TABLE Stu_Session (
    booking_id NUMBER PRIMARY KEY,
    slot_id NUMBER REFERENCES Session_Slot(slot_id),
    student_id NUMBER REFERENCES Student(student_id),
    mentor_id NUMBER REFERENCES Mentor(mentor_id),
    booking_status VARCHAR2(50)
);

CREATE TABLE Feedback (
    feedback_id NUMBER PRIMARY KEY,
    booking_id NUMBER REFERENCES Stu_Session(booking_id),
    student_id NUMBER REFERENCES Student(student_id),
    rating NUMBER,
    comments VARCHAR2(400)
);

-- === CREATE TRIGGERS ===
CREATE OR REPLACE TRIGGER trg_student_id
BEFORE INSERT ON Student
FOR EACH ROW
BEGIN
  IF :new.student_id IS NULL THEN
    SELECT student_seq.NEXTVAL INTO :new.student_id FROM dual;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_mentor_id
BEFORE INSERT ON Mentor
FOR EACH ROW
BEGIN
  IF :new.mentor_id IS NULL THEN
    SELECT mentor_seq.NEXTVAL INTO :new.mentor_id FROM dual;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_internship_id
BEFORE INSERT ON Internship
FOR EACH ROW
BEGIN
  IF :new.internship_id IS NULL THEN
    SELECT internship_seq.NEXTVAL INTO :new.internship_id FROM dual;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_application_id
BEFORE INSERT ON Application
FOR EACH ROW
BEGIN
  IF :new.application_id IS NULL THEN
    SELECT application_seq.NEXTVAL INTO :new.application_id FROM dual;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_feedback_id
BEFORE INSERT ON Feedback
FOR EACH ROW
BEGIN
  IF :new.feedback_id IS NULL THEN
    SELECT feedback_seq.NEXTVAL INTO :new.feedback_id FROM dual;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_interest_id
BEFORE INSERT ON Interests
FOR EACH ROW
BEGIN
  IF :new.interest_id IS NULL THEN
    SELECT interest_seq.NEXTVAL INTO :new.interest_id FROM dual;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_session_slot_id
BEFORE INSERT ON Session_Slot
FOR EACH ROW
BEGIN
  IF :new.slot_id IS NULL THEN
    SELECT session_slot_seq.NEXTVAL INTO :new.slot_id FROM dual;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_stu_session_id
BEFORE INSERT ON Stu_Session
FOR EACH ROW
BEGIN
  IF :new.booking_id IS NULL THEN
    SELECT stu_session_seq.NEXTVAL INTO :new.booking_id FROM dual;
  END IF;
END;
/